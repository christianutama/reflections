When would you want to use a remote repository rather than keeping all
your work local?
We want to use a remote repository as opposed to keeping all the work
local whenever  we are making a project that is going to
have more than one contributors or we are working on the project on more
than one computers.

Why might you want to always pull changes manually rather than having 
Git automatically stay up-to-date with your remote repository?
Because most of the time, we work on our local repository and as such,
our local repository will be ahead of our remote repository by a
certain number of commits. Having Git automatically stay up-to-date with
our remote repository will introduce the risk of reverting our local
repository to its previous state as in the not-so-up-to-date remote
repository.

Describe the differences between forks, clones, and branches. When 
would you use one instead of another?
Forks: cloning a repository on GitHub to your own GitHub account. This
is usually done whenever we don't have access to modify the mentioned
repository or in other words, we are not listed as the contributors, and
we want to make our own version of the repository.
Clones: cloning a repository on GitHub or a local repository to a local
repository on our computer. This is usually done whenever we want to
clone our existing remote repository on GitHub to our computer and we
have access to pull and push to the remote repository. Clones can also
be used to clone a remote repository which we don't have the authority
to contribute to but we want to work on it only on our computer(without
remote push capability).
Branches: cloning the state of the current branch to a new branch and
usually done to test out experimental features which doesn't mess with
the main/production quality code on the master branch. It is then up to
us to decide whether to include the experimental features into the
master branch by merging.

What is the benefit of having a copy of the last known state of the 
remote stored locally?
The benefit of having a copy of the last known state of the remote is
obviously tied directly to connectivity. It allows us to work on our
project locally with the knowledge of the last state of the remote if
we are not connected to the internet. That way, we can avoid conflicts
that may be introduced if we don't know the last state of the remote, at
least at our last time of pulling.

How would you collaborate without using Git or GitHub? What would be 
easier, and what would be harder?
Collaborating without Git or GitHub can be done by working together
in the same place on separate computers and constantly updating others
on what changes each of us has made. Another way is to work separately
and making use of Dropbox, Google Drive, or other cloud storage and
communicating every time a change has been made, pretty much the same
as the previous solution. Obviously, comparing and merging updates 
would be much harder as it has to be done manually and line-by-line.
Furthermore, people can work and update the same files at the same time
so it may pose a problem because one person's update may be overwritten
by the others because there is no mechanism such as creating branches 
in Git and GitHub. As to what would be easier, it would be easier to 
update/overwrite files without Git and GitHub but not in the right way.

When would you want to make changes in a separate branch rather than 
directly in master? What benefits does each approach have?
Making changes in a separate branch has much more advantage as opposed
to directly working on the master branch, especially when we are
working with a number of collaborators. For instance, making sure that
we don't break the master branch will be a whole lot easier because
we can make sure that we resolve all the conflicts between our working
branch and the master branch before merging, and that is a very
convenient way of collaborating. As far as I'm concerned, working 
directly on the main branch only has one advantage, which is simplicity.
It is much more simple for us to work, commit, and merge on a single
master branch as opposed to taking the long road by branching,
especially if the project we are working on is not a very big one and
we are working individually. 